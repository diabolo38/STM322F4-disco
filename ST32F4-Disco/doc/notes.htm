<h2> eclipse setup</h2>
<h2>gnu arm eclispe plugin</h2>

gnu arm eclispe plugin is highly recomanded even if the project may still buidl using "cross gcc toolschain"
If you switch toolchain most compile and link setting will be lost and you have to resetup them.
 
teh plugin can be installed from <a href="http://gnuarmeclipse.sourceforge.net/updates">here</a><br>
follow usual eclispe software install from menu window->preference-> isntall new software
 
<h2>var</h2>
STM32F4_CUBE linked resource variable must be defined and point to stm32f4_vxxx library top folder<br>
the library is partilay downloaded by STM32CuveMX but the project equired the  full package that can be donwloed from 
 <a href="http://www.st.com/web/en/catalog/tools/PF259243">st web site</a>
<img src="link_var.png"></img>
<br>
refresh (f5) project once done to get all path resolved <br>
 <h2>setting</h2>
 update cross compiler path as needed (if in system path it may be removed)<br>
 <img src="corss_setting.png"></img>
 
<h1>folder</h1>
<h2>tooolchain</h2>
toolchains specific file like startup linker script interrupt vector etc ... <br>
part of these files come from gnu arm eclipse plugin <br>
can be installed from <a href="http://gnuarmeclipse.sourceforge.net/updates"></a>

<h2>bsp</h2>
stm32f4 cube board support package file, ease interaction with board mems/accelero and audio<br>
audio not working not tested so far  issue in getting the dsp lib to link .
if not need these can be exclude form build or deleted delete the link only)   
 
<h2> drivers</h2>
src and inc link to all hal cmsis and device drivers<br>
make sure to have a correct stm32f4_hal_conf.h in your app/inc!<br>
unused driver c file may be exclude from build to save compile time.
 
<h2>Middlewares</h2>
Middlewares from the stm32f4 cube library <br>
<h3>usb device and host ,</h3>
unused class directory may be exclude from link to save compile time.<br>  

<h3>FreeRTOS</h3>
excluded from build by default, also require symbol USE_FREE_RTOS to be set to 1<br>
CDC + FreeRTos show tasking , one task runns the demo the 2nd sent message on vitrtual com port <br> 
 
<h2>usbc</h2>
in progress work for usb device to support a better composite usb device framework<br>
require to get demo hid/cdc <br> 
 
<h2>Application App/src  App/inc </h2>
The application source and include<br>Copied from CubeMX gnerated project (attolic base or not)<br>
  
If app need different usb device or host exclude delete existing one from configuration 
bring new from Middlewares (use virtual folder and link via variable).<br>   
<h1>demo </h1> 
<h2>customizing build</h2>
demo can be built with hid or cdc (include a typical cdc if from cube generator) 
see main.h only define one of <br>  
#define USE_HID 0 <br>
#define USE_CDC 1 <br>
if none is selected custom vendor specific device is included <br>

By defaut external HSE mode is used (require for proper USb operation) <br>
internal osiclator can be selected by editing SystemClock_Config(void), CubeMX can generate a config for you <br>

to activate FreeRTOS de-exclude FreeRToOS directory from build (resource configuration)<br>
in project propertie (general->path and symbol)  edit symbol USE_FREE_RTOS value to 1 (do not delete the symbols)
 
<h2>launch and debug </h2>
update the launch config to use rigth opencd and debuger if not correct<br>
<img src="debug_cfg.png"></img><br>
if eclipse cross var are sets you could use ${cross_prefix}gdb${cross_suffix} instead of system path<br>
<br> 
openocd launcher is part of gnu arm eclispe plugin it can be installed from <a href="http://gnuarmeclipse.sourceforge.net/updates">here</a>

<h2>running</h2>
Like the offcial demo press the blue button to togle usb mode<br>
download and install virtual com driver from <a href="http://www.st.com/web/en/catalog/tools/PF257938"> st site </a> and install it. 
when demo enter usb cdc mode it will send mems acceleration x avg, y avg ,z avg , dx ,dy,dz "n <\br>
to serial (use a terminal such as putty or teraterm)


